{"ast":null,"code":"var _jsxFileName = \"/Users/agarci/Desktop/IronHack/2020-04-15-Conways-Game-of-Life/app/src/App.jsx\";\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\nimport \"./App.css\";\n\nconst generateGrid = (numRows, numCols) => {\n  const rows = [];\n\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(Number(numCols)), () => 0));\n  }\n\n  return rows;\n};\n\nconst operations = [[0, 1], [0, -1], [1, -1], [-1, 1], [1, 1], [-1, -1], [1, 0], [-1, 0]];\n\nfunction App() {\n  const [numRows, setNumberRow] = useState(Number);\n  const [numCols, setNumberCol] = useState(Number);\n  const [running, setRunning] = useState(false);\n  const [grid, setGrid] = useState([]);\n\n  const handleChange = ({\n    target: {\n      id,\n      value\n    }\n  }) => id === \"col\" ? setNumberCol(value) : setNumberRow(value);\n\n  useEffect(() => setGrid(() => generateGrid(numRows, numCols)), [numRows, numCols]);\n  const foundRef = useRef();\n  foundRef.current = found;\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n    setTimeout(runSimulation, 100);\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, \"GAME THE LIVE\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"row\",\n    value: numRows,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"col\",\n    value: numCols,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    style: {\n      gridTemplateColumns: `repeat(${numCols}, 20px)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, grid.map((rows, i) => rows.map((col, k) => /*#__PURE__*/React.createElement(\"div\", {\n    className: col ? \"active\" : \"inactive\",\n    key: `${i}-${k}`,\n    onClick: () => {\n      const newGrid = produce(grid, gridCopy => {\n        gridCopy[i][k] = grid[i][k] ? 0 : 1;\n      });\n      setGrid(newGrid);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setFound(!running);\n\n      if (!running) {\n        foundRef.current = true;\n        runSimulation();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, found ? \"STOP\" : \"START\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/agarci/Desktop/IronHack/2020-04-15-Conways-Game-of-Life/app/src/App.jsx"],"names":["React","useState","useEffect","useCallback","useRef","produce","generateGrid","numRows","numCols","rows","i","push","Array","from","Number","operations","App","setNumberRow","setNumberCol","running","setRunning","grid","setGrid","handleChange","target","id","value","foundRef","current","found","runSimulation","runningRef","g","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","gridTemplateColumns","map","col","newGrid","setFound"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\nimport \"./App.css\";\n\nconst generateGrid = (numRows, numCols) => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(Number(numCols)), () => 0));\n  }\n  return rows;\n};\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\nfunction App() {\n  const [numRows, setNumberRow] = useState(Number);\n  const [numCols, setNumberCol] = useState(Number);\n\n  const [running, setRunning] = useState(false);\n  const [grid, setGrid] = useState([]);\n\n  const handleChange = ({ target: { id, value } }) =>\n    id === \"col\" ? setNumberCol(value) : setNumberRow(value);\n\n  useEffect(() => setGrid(() => generateGrid(numRows, numCols)), [\n    numRows,\n    numCols\n  ]);\n\n  const foundRef = useRef();\n  foundRef.current = found;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <>\n      <h1>GAME THE LIVE</h1>\n      <input id=\"row\" value={numRows} onChange={handleChange} />\n      <input id=\"col\" value={numCols} onChange={handleChange} />\n      <div\n        className=\"App\"\n        style={{ gridTemplateColumns: `repeat(${numCols}, 20px)` }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              className={col ? \"active\" : \"inactive\"}\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n            />\n          ))\n        )}\n      </div>\n      <button onClick={() => {\n        setFound(!running)\n        if (!running) {\n          foundRef.current = true;\n          runSimulation();\n        }\n      }}>\n        {found ? \"STOP\" : \"START\"}\n      </button>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}