{"ast":null,"code":"var _jsxFileName = \"/Users/agarci/Desktop/IronHack/2020-04-15-Conways-Game-of-Life/app/src/App.jsx\";\nimport React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport \"./App.css\";\nconst numRows = 40;\nconst numCols = 90;\n\nconst valueLabelFormat = value => {\n  const [coefficient, exponent] = value.toExponential().split('e').map(item => Number(item));\n  return `${Math.round(coefficient)}e^${exponent}`;\n};\n\nconst operations = [[0, 1], [0, -1], [1, -1], [-1, 1], [1, 1], [-1, -1], [1, 0], [-1, 0]];\n\nconst generate = () => {\n  const rows = [];\n\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\nfunction App() {\n  const [value, setValue] = React.useState(1);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const [running, setRunning] = useState(false);\n  const [grid, setGrid] = useState(generate());\n  const runningRef = useRef();\n  runningRef.current = running;\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid(value => {\n      return produce(value, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += value[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (value[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n    setTimeout(runSimulation, 1000);\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, \"GAME THE LIVE\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setRunning(!running);\n\n      if (!running) {\n        runningRef.current = true;\n        runSimulation();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, running ? \"STOP\" : \"START\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, grid.map((rows, i) => rows.map((col, k) => /*#__PURE__*/React.createElement(\"div\", {\n    className: col ? \"active\" : \"inactive\",\n    key: `${i}-${k}`,\n    onClick: () => {\n      const newGrid = produce(grid, gridCopy => {\n        gridCopy[i][k] = grid[i][k] ? 0 : 1;\n      });\n      setGrid(newGrid);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/agarci/Desktop/IronHack/2020-04-15-Conways-Game-of-Life/app/src/App.jsx"],"names":["React","useState","useCallback","useRef","produce","Typography","Slider","numRows","numCols","valueLabelFormat","value","coefficient","exponent","toExponential","split","map","item","Number","Math","round","operations","generate","rows","i","push","Array","from","App","setValue","handleChange","event","newValue","running","setRunning","grid","setGrid","runningRef","current","runSimulation","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","col","newGrid"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport \"./App.css\";\n\nconst numRows = 40;\nconst numCols = 90;\n\nconst  valueLabelFormat = value => {\n  const [coefficient, exponent] = value\n    .toExponential()\n    .split('e')\n    .map((item) => Number(item));\n  return `${Math.round(coefficient)}e^${exponent}`;\n}\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\nconst generate = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\nfunction App() {\n  const [value, setValue] = React.useState(1);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  const [running, setRunning] = useState(false);\n  const [grid, setGrid] = useState(generate());\n\n  const runningRef = useRef();\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid(value => {\n      return produce(value, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += value[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (value[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, 1000);\n  }, []);\n\n  return (\n    <>\n      <div>\n        <h1>GAME THE LIVE</h1>\n        <button\n          onClick={() => {\n            setRunning(!running);\n            if (!running) {\n              runningRef.current = true;\n              runSimulation();\n            }\n          }}\n        >\n          {running ? \"STOP\" : \"START\"}\n        </button>\n      </div>\n\n      <div\n        className=\"App\"\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              className={col ? \"active\" : \"inactive\"}\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n            />\n          ))\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}