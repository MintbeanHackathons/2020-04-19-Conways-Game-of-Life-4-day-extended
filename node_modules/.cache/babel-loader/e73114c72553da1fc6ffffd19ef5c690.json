{"ast":null,"code":"var _jsxFileName = \"/Users/agarci/Desktop/IronHack/2020-04-15-Conways-Game-of-Life/app/src/App.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst createRow = number => {\n  const row = [];\n  let i = 0;\n\n  while (i < number) {\n    row.push(false);\n    i++;\n  }\n\n  return row;\n};\n\nfunction App() {\n  const [grid, setGrid] = useState(createRow(5000));\n  const [found, setFound] = useState(false);\n  const [time, setTime] = useState(0);\n\n  const activeCeils = idx => {\n    const newGrid = [...grid];\n    newGrid[idx] = !grid[idx];\n    setGrid(newGrid);\n  };\n\n  const heart = () => {\n    console.log(\"Hola\");\n  };\n\n  found ? setInterval(() => {\n    heart();\n  }, 1000) : clearInterval();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, \"GAME THE LIVE\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, grid.map((elm, idx) => /*#__PURE__*/React.createElement(\"div\", {\n    className: grid[idx] ? \"active\" : \"inactive\",\n    key: idx,\n    onClick: () => activeCeils(idx),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setFound(!found),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, found ? \"STOP\" : \"START\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/agarci/Desktop/IronHack/2020-04-15-Conways-Game-of-Life/app/src/App.jsx"],"names":["React","useState","useEffect","createRow","number","row","i","push","App","grid","setGrid","found","setFound","time","setTime","activeCeils","idx","newGrid","heart","console","log","setInterval","clearInterval","map","elm"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;;AAEA,MAAMC,SAAS,GAAGC,MAAM,IAAI;AAC1B,QAAMC,GAAG,GAAG,EAAZ;AACA,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGF,MAAX,EAAmB;AACjBC,IAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT;AACAD,IAAAA,CAAC;AACF;;AACD,SAAOD,GAAP;AACD,CARD;;AAUA,SAASG,GAAT,GAAe;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAACE,SAAS,CAAC,IAAD,CAAV,CAAhC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAgBb,QAAQ,CAAC,CAAD,CAA9B;;AACA,QAAMc,WAAW,GAAGC,GAAG,IAAI;AACzB,UAAMC,OAAO,GAAG,CAAC,GAAGR,IAAJ,CAAhB;AACAQ,IAAAA,OAAO,CAACD,GAAD,CAAP,GAAe,CAACP,IAAI,CAACO,GAAD,CAApB;AACAN,IAAAA,OAAO,CAACO,OAAD,CAAP;AACD,GAJD;;AAMA,QAAMC,KAAK,GAAG,MAAM;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAEG,GAHD;;AAIAT,EAAAA,KAAK,GAAGU,WAAW,CAAC,MAAM;AACpBH,IAAAA,KAAK;AACN,GAFc,EAEZ,IAFY,CAAd,GAEUI,aAAa,EAF5B;AAIA,sBACE,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADA,eAEA;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,IAAI,CAACc,GAAL,CAAS,CAACC,GAAD,EAAMR,GAAN,kBACR;AACE,IAAA,SAAS,EAAEP,IAAI,CAACO,GAAD,CAAJ,GAAY,QAAZ,GAAuB,UADpC;AAEE,IAAA,GAAG,EAAEA,GAFP;AAGE,IAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,GAAD,CAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CAFA,eAWE;AAAQ,IAAA,OAAO,EAAE,MAAMJ,QAAQ,CAAC,CAACD,KAAF,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0CA,KAAK,GAAG,MAAH,GAAU,OAAzD,CAXF,CADF;AAeD;;AAED,eAAeH,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst createRow = number => {\n  const row = [];\n  let i = 0;\n  while (i < number) {\n    row.push(false);\n    i++;\n  }\n  return row;\n};\n\nfunction App() {\n  const [grid, setGrid] = useState(createRow(5000));\n  const [found, setFound] = useState(false)\n  const [time, setTime]=useState(0)\n  const activeCeils = idx => {\n    const newGrid = [...grid];\n    newGrid[idx] = !grid[idx];\n    setGrid(newGrid);\n  };\n  \n  const heart = () => {\nconsole.log(\"Hola\")\n\n  }\n  found ? setInterval(() => {\n        heart()\n      }, 1000) : clearInterval()\n\n  return (\n    <>\n    <h1>GAME THE LIVE</h1>\n    <div className=\"App\">\n      {grid.map((elm, idx) => (\n        <div\n          className={grid[idx] ? \"active\" : \"inactive\"}\n          key={idx}\n          onClick={() => activeCeils(idx)}\n        />\n      ))}\n    </div>\n      <button onClick={() => setFound(!found)}>{found ? \"STOP\":\"START\"}</button>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}