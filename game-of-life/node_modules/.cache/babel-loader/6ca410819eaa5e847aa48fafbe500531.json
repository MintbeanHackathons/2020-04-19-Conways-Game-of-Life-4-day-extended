{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { ROW, COLUMN } from \"../constants/constants\"; // const COLUMN = 32;\n// const ROW = 23;\n\nconst initializeGrid = () => {\n  let grid = [];\n\n  for (let row = 0; row < ROW; row++) {\n    const newRow = [];\n\n    for (let column = 0; column < COLUMN; column++) {\n      newRow.push(false);\n    }\n\n    grid.push(newRow);\n  }\n\n  grid[11][11] = true;\n  grid[11][12] = true;\n  grid[11][13] = true;\n  grid[11][14] = true;\n  grid[11][15] = true;\n  grid[11][16] = true;\n  grid[11][17] = true;\n  grid[11][18] = true;\n  grid[11][19] = true;\n  grid[11][20] = true;\n  return grid;\n};\n\nconst greaterThanZero = x => {\n  return x >= 0;\n};\n\nconst lessThanBoundry = (x, boundry) => {\n  return x < boundry;\n};\n\nconst checkNeighbourSquares = (grid, x, y) => {\n  let aliveNeighbours = 0;\n\n  if (greaterThanZero(x - 1)) {\n    if (grid[x - 1][y] === true) {\n      aliveNeighbours++;\n    }\n  }\n\n  if (greaterThanZero(x - 1) && greaterThanZero(y - 1)) {\n    if (grid[x - 1][y - 1] === true) {\n      aliveNeighbours++;\n    }\n  }\n\n  if (greaterThanZero(y - 1)) {\n    if (grid[x][y - 1] === true) {\n      aliveNeighbours++;\n    }\n  }\n\n  if (lessThanBoundry(x + 1, ROW) && greaterThanZero(y - 1, 0)) {\n    if (grid[x + 1][y - 1] === true) {\n      aliveNeighbours++;\n    }\n  }\n\n  if (lessThanBoundry(x + 1, ROW)) {\n    console.log(x, y);\n\n    if (grid[x + 1][y] === true) {\n      aliveNeighbours++;\n    }\n  }\n\n  if (lessThanBoundry(x + 1, ROW) && lessThanBoundry(y + 1, COLUMN)) {\n    if (grid[x + 1][y + 1] === true) {\n      aliveNeighbours++;\n    }\n  }\n\n  if (lessThanBoundry(y + 1, COLUMN)) {\n    if (grid[x][y + 1] === true) {\n      aliveNeighbours++;\n    }\n  }\n\n  if (greaterThanZero(x - 1) && lessThanBoundry(y + 1, COLUMN)) {\n    if (grid[x - 1][y + 1] === true) {\n      aliveNeighbours++;\n    }\n  }\n\n  return aliveNeighbours;\n};\n\nconst actOnDead = (grid, x, y) => {\n  return checkNeighbourSquares(grid, x, y) === 3;\n};\n\nconst actOnAlive = (grid, x, y) => {\n  const aliveNeighbours = checkNeighbourSquares(grid, x, y);\n  return !(aliveNeighbours < 2 || aliveNeighbours >= 4);\n};\n\nconst scanGrid = grid => {\n  const newGrid = grid.map(curr => [...curr]);\n\n  for (let row = 0; row < ROW; row++) {\n    for (let column = 0; column < COLUMN; column++) {\n      if (grid[row][column] === true) {\n        newGrid[row][column] = actOnAlive(grid, row, column);\n      } else {\n        newGrid[row][column] = actOnDead(grid, row, column);\n      }\n    }\n  }\n\n  return newGrid;\n};\n\nexport default function useGridData() {\n  const [grid, setGrid] = useState(initializeGrid());\n  const [allMoves, setAllMoves] = useState(false);\n\n  const nextMove = grid => {\n    setGrid(scanGrid(grid));\n  };\n\n  const changeAllMoves = () => {\n    setAllMoves(!allMoves);\n  };\n\n  useEffect(() => {\n    if (allMoves) {\n      const interval = setInterval(() => setGrid(scanGrid(grid)), 750);\n      return () => clearInterval(interval);\n    }\n  }, [allMoves, grid]);\n  return {\n    grid,\n    nextMove,\n    changeAllMoves\n  };\n}","map":{"version":3,"sources":["/Users/christopherspraggett/mintbeam/2020-04-19-Conways-Game-of-Life-4-day-extended/game-of-life/src/hooks/useGridData.js"],"names":["useEffect","useState","ROW","COLUMN","initializeGrid","grid","row","newRow","column","push","greaterThanZero","x","lessThanBoundry","boundry","checkNeighbourSquares","y","aliveNeighbours","console","log","actOnDead","actOnAlive","scanGrid","newGrid","map","curr","useGridData","setGrid","allMoves","setAllMoves","nextMove","changeAllMoves","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { ROW, COLUMN } from \"../constants/constants\";\n\n// const COLUMN = 32;\n// const ROW = 23;\n\nconst initializeGrid = () => {\n  let grid = [];\n  for (let row = 0; row < ROW; row++) {\n    const newRow = [];\n    for (let column = 0; column < COLUMN; column++) {\n      newRow.push(false);\n    }\n    grid.push(newRow);\n  }\n  grid[11][11] = true;\n  grid[11][12] = true;\n  grid[11][13] = true;\n  grid[11][14] = true;\n  grid[11][15] = true;\n  grid[11][16] = true;\n  grid[11][17] = true;\n  grid[11][18] = true;\n  grid[11][19] = true;\n  grid[11][20] = true;\n\n  return grid;\n};\n\nconst greaterThanZero = (x) => {\n  return x >= 0;\n};\n\nconst lessThanBoundry = (x, boundry) => {\n  return x < boundry;\n};\n\nconst checkNeighbourSquares = (grid, x, y) => {\n  let aliveNeighbours = 0;\n  if (greaterThanZero(x - 1)) {\n    if (grid[x - 1][y] === true) {\n      aliveNeighbours++;\n    }\n  }\n  if (greaterThanZero(x - 1) && greaterThanZero(y - 1)) {\n    if (grid[x - 1][y - 1] === true) {\n      aliveNeighbours++;\n    }\n  }\n  if (greaterThanZero(y - 1)) {\n    if (grid[x][y - 1] === true) {\n      aliveNeighbours++;\n    }\n  }\n  if (lessThanBoundry(x + 1, ROW) && greaterThanZero(y - 1, 0)) {\n    if (grid[x + 1][y - 1] === true) {\n      aliveNeighbours++;\n    }\n  }\n  if (lessThanBoundry(x + 1, ROW)) {\n    console.log(x, y);\n    if (grid[x + 1][y] === true) {\n      aliveNeighbours++;\n    }\n  }\n  if (lessThanBoundry(x + 1, ROW) && lessThanBoundry(y + 1, COLUMN)) {\n    if (grid[x + 1][y + 1] === true) {\n      aliveNeighbours++;\n    }\n  }\n  if (lessThanBoundry(y + 1, COLUMN)) {\n    if (grid[x][y + 1] === true) {\n      aliveNeighbours++;\n    }\n  }\n  if (greaterThanZero(x - 1) && lessThanBoundry(y + 1, COLUMN)) {\n    if (grid[x - 1][y + 1] === true) {\n      aliveNeighbours++;\n    }\n  }\n  return aliveNeighbours;\n};\n\nconst actOnDead = (grid, x, y) => {\n  return checkNeighbourSquares(grid, x, y) === 3;\n};\n\nconst actOnAlive = (grid, x, y) => {\n  const aliveNeighbours = checkNeighbourSquares(grid, x, y);\n\n  return !(aliveNeighbours < 2 || aliveNeighbours >= 4);\n};\n\nconst scanGrid = (grid) => {\n  const newGrid = grid.map((curr) => [...curr]);\n\n  for (let row = 0; row < ROW; row++) {\n    for (let column = 0; column < COLUMN; column++) {\n      if (grid[row][column] === true) {\n        newGrid[row][column] = actOnAlive(grid, row, column);\n      } else {\n        newGrid[row][column] = actOnDead(grid, row, column);\n      }\n    }\n  }\n  return newGrid;\n};\n\nexport default function useGridData() {\n  const [grid, setGrid] = useState(initializeGrid());\n  const [allMoves, setAllMoves] = useState(false);\n\n  const nextMove = (grid) => {\n    setGrid(scanGrid(grid));\n  };\n\n  const changeAllMoves = () => {\n    setAllMoves(!allMoves);\n  };\n\n  useEffect(() => {\n    if (allMoves) {\n      const interval = setInterval(() => setGrid(scanGrid(grid)), 750);\n\n      return () => clearInterval(interval);\n    }\n  }, [allMoves, grid]);\n\n  return { grid, nextMove, changeAllMoves };\n}\n"]},"metadata":{},"sourceType":"module"}